<?php

namespace Shurjomukhi\ShurjopayLaravelPlugin\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log;
use Exception;
use Shurjomukhi\ShurjopayLaravelPlugin\Http\Traits\ServiceMethod;

class Shurjopay extends Controller {

    use ServiceMethod;

    /**
     * Create token to authorize the merchant
     *
     * @return  mixed $response
     */

    public function authenticate() {
        $curl_header = array('Content-Type: application/json');
        $payload = array('username' => config('Shurjopay.merchant_username'),
                         'password' => config('Shurjopay.merchant_password'));

        try {
                $response = $this->prepareCurlRequest(config('Shurjopay.auth_token_url'),'POST',json_encode($payload),$curl_header);
                $this->createLog("ShurjoPay has been authenticated successfully !");

                # Got object as response from prepareCurlRequest in $response variable
                # and returning that object from here
                return $response;
                //return response(['response'=>$response],200);
            } catch (Exception $e) {
                $this->createLog("Invalid User name or Password due to shurjoPay authentication.");
                return $e->getMessage();
            }

    }

    /**
     * Make Payment request to shurjoPay
     *
     * @param  mixed $request
     * @return void
     */

    public function makePayment(Request $request){

        $validation_status = $this->validateInput($request);

        # When validation success
        if($validation_status["isValidationPass"])
        {
            $curl_header = array('Content-Type: application/json');
            $trxn_data =  $this->prepareTransactionPayload($request);
            $authentication_data = $this->authenticate();  //object

            if(!empty($authentication_data->sp_code) && ($authentication_data->sp_code)=='200')
            {
                    $merchant_info = array(
                        'token' => $authentication_data->token,
                        'store_id' => $authentication_data->store_id,
                        'prefix' => config('Shurjopay.merchant_prefix'),
                        'return_url' => config('Shurjopay.merchant_return_url'),
                        'cancel_url' => config('Shurjopay.merchant_cancel_url'),
                    );

                    try {
                        $response = $this->prepareCurlRequest(config('Shurjopay.secret_pay_url'),'POST',json_encode(array_merge($merchant_info, $trxn_data)),$curl_header);

                        if(!empty($response->checkout_url)){
                            $this->createLog("Payment URL has been generated by shurjoPay!");
                            return redirect($response->checkout_url);
                        }
                        else{
                            return $response;  //object
                        }
                    } catch (Exception $e) {
                        return $e->getMessage();
                    }
            }

            # When wrong credentials or empty credentials
            else{
                    $this->createLog("Payment request failed");
                    return $authentication_data;  //object
                }
        }

        # When validation fail
        else{
            return $validation_status;
        }
    }

    /**
     *  Verify the payment request
     *
     * @param mixed $order_id
     * @return mixed $response
     */

    public function verifyPayment($order_id)
    {
        $authentication_data = $this->authenticate();   //object
        if(!empty($authentication_data->sp_code) && ($authentication_data->sp_code)=='200')
        {
            try {
                    $curl_header = array('Authorization:Bearer '.$authentication_data->token,'Content-Type: application/json');
                    $response = $this->prepareCurlRequest(config('Shurjopay.verification_url'),'POST',json_encode(array('order_id' => $order_id)),$curl_header);
                    $this->createLog("Payment verification is done successfully!");

                    return $response;       //object
                } catch (Exception $e) {
                    return $e->getMessage();
                }
        }
        else{
                $this->createLog("Payment verification is failed!");
                return $authentication_data;   //object
            }

    }


}


